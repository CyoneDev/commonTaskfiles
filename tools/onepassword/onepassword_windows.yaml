# https://taskfile.dev
version: '3'

tasks:
  install:
    cmds:
      - scoop install 1password-cli
    status: 
      - command -v op.exe

  check-token-exists:
    internal: true
    preconditions:
      - sh: '[[ ! -z "$OP_SERVICE_ACCOUNT_TOKEN" ]]'
        msg: "OP_SERVICE_ACCOUNT_TOKEN is not set. Please set it in your environment variables."
  
  check-token-valid:
    deps: [check-token-exists]
    preconditions:
      - sh: 'op whoami'
        msg: 'Token is invalid. Please check the "OP_SERVICE_ACCOUNT_TOKEN" environment variable to ensure its valid.'

  inject-secrets:
    desc: "Inject templates in the given directory"
    internal: true
    cmds:
      - |
        pwsh -Command '
          Get-ChildItem -Path {{.DIR}} -Filter *.tpl -File | ForEach-Object {
            $tplFile = $_.FullName
            $outputFile = $tplFile -replace "\.tpl`$", ""
            op inject -i $tplFile -o $outputFile --force
          }
        '
    silent: true
    vars:
      DIR: "{{.DIR}}"
  
  set-token:
    desc: "Set the 1Password token by having the user login through azure to prove they're an active and approved employee"
    deps: [pwsh:install]
    vars: 
      Required: [AZ_SUBSCRIPTION_ID, AKV_SECRET_NAME, AKV_VAULT_NAME]
    cmds:
      - pwsh.exe -c '$(Invoke-RestMethod -Uri https://raw.githubusercontent.com/CyoneDev/commonTaskfiles/main/tools/onepassword/onepassword_token.ps1 | Out-File $ENV:TEMP\onepassword_token.ps1 -force); . $ENV:TEMP\onepassword_token.ps1 -akvSecretName {{.akvSecretName}} -akvVaultName {{.akvVaultName}} -AZ_SUBSCRIPTION_ID {{.AZ_SUBSCRIPTION_ID}}'
    status: 
      - '[[ ! -z "$OP_SERVICE_ACCOUNT_TOKEN" ]]'
      - 'op whoami'